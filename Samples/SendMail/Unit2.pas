unit Unit2;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  HWebApp, AppSSI, HtmlTxt, WapActns, WapTmplt, WapASmtp;

type
  TSessionModule = class(TDataModule)
    WapSession1: TWapSession;
    OrderFormTemplate: TWapTemplate;
    WapSMTP1: TWapSMTP;
    procedure WapSession1Start(Session: TWapSession);
    procedure WapSession1Execute(Session: TWapSession);
    procedure WapSession1End(Session: TWapSession);
    procedure WapSMTP1SendMessage(Sender: TObject; Request: THttpRequest;
      Response: THttpResponse; const Value: String; Params: TVariantList;
      var Handled: Boolean);
    procedure WapSMTP1MessageSent(Sender: TObject; Asynch: Boolean);
    procedure WapSMTP1Exception(Sender: TObject; E: Exception;
      Asynch: Boolean);
  private
    { Private declarations }
    function GetRequest: THttpRequest;
    function GetResponse: THttpResponse;
  public
    { Public declarations }
    property Request: THttpRequest read GetRequest;
    property Response: THttpResponse read GetResponse;
  end;

var
  SessionModule: TSessionModule;

implementation

uses Unit1;

{$R *.DFM}

function TSessionModule.GetRequest: THttpRequest;
begin
  Result := WapSession1.Request;
end;

function TSessionModule.GetResponse: THttpResponse;
begin
  Result := WapSession1.response;
end;

procedure TSessionModule.WapSession1Start(Session: TWapSession);
begin
  // Perform session initialization
end;

procedure TSessionModule.WapSession1Execute(Session: TWapSession);
begin
  // Perform a sanity check 
  if (Form1.WapApp1['POP3Server'] = null) or (Form1.WapApp1['EmailAccount'] = null) then
    Writeln(Response.TextOut, 'Please fill in the Email Configuration fields ',
        'in the application window')
  else
    WapSession1.DispatchActions;
end;

procedure TSessionModule.WapSession1End(Session: TWapSession);
begin
  // Perform session cleanup
end;

procedure TSessionModule.WapSMTP1SendMessage(Sender: TObject;
  Request: THttpRequest; Response: THttpResponse; const Value: String;
  Params: TVariantList; var Handled: Boolean);
var
  CustomerName: string;
  CustomerEmail: string;
  NumOfCookies: string;
begin
    // Use the values defined in the application window. A real-life application
    // will probably read these values from a configuration file.
    WapSMTP1.Server := Form1.WapApp1['POP3Server'];
    WapSMTP1.Recipient := Form1.WapApp1['EmailAccount'];

    // Fake a "From" address
    WapSMTP1.From := 'WebAppSample@' + WapSMTP1.Server;

    CustomerName := Request['CustomerName'];
    NumOfCookies := Request['CookiesNum'];

    // The CC property was set automatically because the "email" field
    // in the form is called "WapSMTP1@CC". See the discussion of template
    // sytax for additional information.
    CustomerEmail := WapSMTP1.CC;

    WapSMTP1.Body :=
        'This email was generated by the WebApp SendMail Sample program' + #13#10 +
        'Customer name : ' + CustomerName + #13#10 +
        'Customer email : ' + CustomerEmail + #13#10 +
        'Number of cookies : ' + NumOfCookies;

    // The HTML form determines if we will send the email asynchronously, or wait
    // until we are sure it was sent ok.
    if (Request['WaitAfterSend'] = 'ON') then
        WapSMTP1.Asynch := false
    else
        WapSMTP1.Asynch := true;


    if WapSMTP1.Asynch then
    begin
        // We are sending the message asynchronously, so e should let the user
        // know that the message was sent now.
        Writeln(Response.TextOut, '<P>Sending email message using the server ',
            WapSMTP1.Server, ' to the email address ', WapSMTP1.Recipient,
            ' with a Carbon Copy to the customer''s email at ', WapSMTP1.CC);
    end
    else
    begin
        // We are going to wait for the email to be sent. Tell the user
        // we are starting the process, since it is going to take some time...
        Writeln(Response.TextOut, '<P>Sending email message... please wait...');
        Flush(Response.TextOut);
    end;
end;

procedure TSessionModule.WapSMTP1MessageSent(Sender: TObject;
  Asynch: Boolean);
begin
  if (not Asynch) then
  begin
    Writeln(Response.TextOut, '<P>Confirmation : Email message sent using the server ',
        WapSMTP1.Server, ' to the email address ', WapSMTP1.Recipient,
        ' with a Carbon Copy to the customer''s email at ', WapSMTP1.CC);
  end;
end;

procedure TSessionModule.WapSMTP1Exception(Sender: TObject; E: Exception;
  Asynch: Boolean);
begin
  if Asynch then
  begin
    // We can't report the error to the user - we are no longer connected
    // to him, since we sent the email asynch.
    // In a real application, we could log this error to a log file.
  end
  else
  begin
    // We are still connected - report the error
    Writeln(Response.TextOut, '<P>Error while attempting to send email : ' + E.Message);
  end;
end;

end.
