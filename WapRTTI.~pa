unit WapRTTI;

{$I WapDef.INC}

interface

uses Classes, SysUtils;

procedure SetPropertyValue(AInstance: TPersistent; const PropPath: string; const Value: string);

implementation

uses TypInfo, Graphics, Controls;


procedure ReadError(const Ident: string);
begin
  raise EReadError.Create(Ident);
end;


const
    SUnknownProperty = 'Property does not exist';
    SInvalidPropertyValue = 'Invalid Property Value';
    SReadOnlyProperty = 'Read only property';
    SInvalidPropertyPath = 'Invalid Property Path';

procedure PropertyNotFound;
begin
  ReadError(SUnknownProperty);
end;

procedure PropValueError;
begin
  ReadError(SInvalidPropertyValue);
end;

function EnumValue(EnumType: PTypeInfo; const EnumName: string): Integer;
begin
  Result := GetEnumValue(EnumType, EnumName);
  if Result = -1 then PropValueError;
end;

type
TIntegerSet = set of 0..SizeOf(Integer) * 8 - 1;

function ParseSet(PropType: PTypeInfo; const PropValue: string): integer;
var
    i: integer;
    list: TStringList;
    elemVal: integer;
begin
    if (PropValue = '') then
        PropValueError;
    if ((PropValue[1] <> '[') or (PropValue[Length(PropValue)] <> ']')) then
        PropValueError;
    list := TStringList.Create;
    try
        list.CommaText := copy(PropValue, 2, Length(PropValue) - 2);
        result := 0;
        for i := 0 to (list.Count - 1) do begin
{$ifdef wap_delphi_2_or_cbuilder_1}
            elemVal := GetEnumValue(GetTypeData(PropType)^.CompType, list[i]);
{$endif wap_delphi_2_or_cbuilder_1}
{$ifdef wap_delphi_3_or_delphi_4}
            elemVal := GetEnumValue(GetTypeData(PropType)^.CompType^, list[i]);
{$endif wap_delphi_3_or_delphi_4}
            Include(TIntegerSet(result), elemVal);
        end;
    finally
        list.Free;
    end;
end;

procedure InternalSetPropertyValue(Instance: TPersistent; PropInfo: Pointer; const PropValue: string);
var
  PropType: PTypeInfo;
  TempInt: longint;
begin
  if PPropInfo(PropInfo)^.SetProc = nil then ReadError(SReadOnlyProperty);
{$ifdef wap_delphi_2_or_cbuilder_1}
  PropType := PPropInfo(PropInfo)^.PropType;
{$endif wap_delphi_2_or_cbuilder_1}
{$ifdef wap_delphi_3_or_delphi_4}
  PropType := PPropInfo(PropInfo)^.PropType^;
{$endif wap_delphi_3_or_delphi_4}
  case PropType^.Kind of
    tkInteger:
        if (PropValue[1] in ['$', '0'..'9']) then
            SetOrdProp(Instance, PropInfo, StrToInt(PropValue))
        else if IsValidIdent(PropValue) then begin
            if (PropType = TypeInfo(TColor)) then begin
                if IdentToColor(PropValue, TempInt) then
                    SetOrdProp(Instance, PropInfo, TempInt)
                else
                    PropValueError;
            end else if (PropType = TypeInfo(TCursor)) then begin
                if IdentToCursor(PropValue, TempInt) then
                    SetOrdProp(Instance, PropInfo, TempInt)
                else
                    PropValueError;
{$ifdef wap_delphi_3_or_delphi_4}
            end else if (PropType = TypeInfo(TFontCharset)) then begin
                if IdentToCharset(PropValue, TempInt) then
                    SetOrdProp(Instance, PropInfo, TempInt)
                else
                    PropValueError;
{$endif wap_delphi_3_or_delphi_4}
            end else
                PropValueError;
        end;
    tkChar:
      SetOrdProp(Instance, PropInfo, Ord(PropValue[1]));
    tkEnumeration:
      SetOrdProp(Instance, PropInfo, EnumValue(PropType, PropValue));
    tkFloat:
      SetFloatProp(Instance, PropInfo, StrToFloat(PropValue));
    tkString, tkLString{$ifdef wap_delphi_3_or_delphi_4}, tkWString{$endif wap_delphi_3_or_delphi_4}:
      SetStrProp(Instance, PropInfo, PropValue);
    tkSet:
      SetOrdProp(Instance, PropInfo, ParseSet(PropType, PropValue));
    tkClass:
        begin
        // tbd
        raise Exception.Create('Access to class properties denied');
        (*
        if (CompareText(PropValue, 'nil') = 0) then
            SetOrdProp(Instance, PropInfo, 0)
        else
            SetObjectIdent(Instance, PropInfo, ReadIdent);
            *)
      end;
    tkMethod:
        // tbd
        raise Exception.Create('Access to method properties denied');
  end;
end;

procedure SetPropertyValue(AInstance: TPersistent; const PropPath: string; const Value: string);
var
  I, J, L: Integer;
  Instance: TPersistent;
  PropValue: TObject;
  PropName: string;
  PropInfo: PPropInfo;

  procedure PropPathError;
  begin
    ReadError(SInvalidPropertyPath);
  end;

begin
      I := 1;
      L := Length(PropPath);
      Instance := AInstance;
//      FCanHandleExcepts := True;
      while True do
      begin
        J := I;
        while (I <= L) and (PropPath[I] <> '.') do Inc(I);
        PropName := Copy(PropPath, J, I - J);
        if I > L then Break;
        PropInfo := GetPropInfo(Instance.ClassInfo, PropName);
        if PropInfo = nil then PropertyNotFound;
        PropValue := nil;
        if PropInfo^.PropType^.Kind = tkClass then
          PropValue := TObject(GetOrdProp(Instance, PropInfo));
        if not (PropValue is TPersistent) then PropPathError;
        Instance := TPersistent(PropValue);
        Inc(I);
      end;
      PropInfo := GetPropInfo(Instance.ClassInfo, PropName);
      if (PropInfo <> nil) then
        InternalSetPropertyValue(Instance, PropInfo, Value)
      else begin
        raise Exception.Create('Unable to set property');
        (* TBD - cannot handle properties defined using DefineProperties
        { Cannot reliably recover from an error in a defined property }
        FCanHandleExcepts := False;
        Instance.DefineProperties(Self);
        FCanHandleExcepts := True;
        *)
        if PropName <> '' then PropertyNotFound;;
      end;
end;

end.
