//----------------------------------------------------------------------------
// AppSSI.hpp - bcbdcc32 generated hdr (DO NOT EDIT) rev: 0
// From: AppSSI.pas
//----------------------------------------------------------------------------
#ifndef AppSSIHPP
#define AppSSIHPP
//----------------------------------------------------------------------------
#include <Graphics.hpp>
#include <Windows.hpp>
#include <HttpReq.hpp>
#include <SDS.hpp>
#include <BrowsCap.hpp>
#include <CookUtil.hpp>
#include <VirtText.hpp>
#include <SysUtils.hpp>
#include <Classes.hpp>
#include <System.hpp>
//-- type declarations -------------------------------------------------------
enum THttpMethodType { mtGet, mtPut, mtPost, mtHead, mtAny };

class __declspec(delphiclass) THttpTransaction;
class __declspec(delphiclass) THttpRequest;
class __declspec(delphiclass) TRequestVariables;
class __declspec(delphiclass) TRequestVariable;
class __declspec(pascalimplementation) TRequestVariables : public TObject
{
	typedef TObject inherited;
	
private:
	AnsiString FAsString;
	TStrings* FVariables;
	TRequestVariable* __fastcall getVariable(const Variant &index);
	int __fastcall getCount(void);
	
public:
	__fastcall TRequestVariables(const AnsiString QueryString);
	__fastcall virtual ~TRequestVariables(void);
	__property int Count = {read=getCount, nodefault};
	__property TRequestVariable* Variables[Variant Index] = {read=getVariable/*, default*/};
	bool __fastcall VariableExists( AnsiString Index);
	__property AnsiString AsString = {read=FAsString, nodefault};
};

class __declspec(delphiclass) TRequestCookies;
class __declspec(delphiclass) TRequestCookie;
class __declspec(pascalimplementation) TRequestCookies : public TObject
{
	typedef TObject inherited;
	
private:
	TStrings* FCookies;
	TStrings* FDummyCookies;
	__fastcall TRequestCookies(const AnsiString HeaderCookie);
	__fastcall virtual ~TRequestCookies(void);
	TRequestCookie* __fastcall getCookie(const Variant &index);
	int __fastcall getCount(void);
	
public:
	__property int Count = {read=getCount, nodefault};
	__property TRequestCookie* Cookies[Variant Index] = {read=getCookie/*, default*/};
	bool __fastcall CookieExists(const AnsiString CookieName);
public:
	/* TObject.Create */ __fastcall TRequestCookies(void) : TObject() { }
	
};

class __declspec(pascalimplementation) THttpRequest : public TObject
{
	typedef TObject inherited;
	
private:
	TAbstractHttpRequestInterface* FHttpInterface;
	TStream* FInputStream;
	AnsiString FLogicalPath;
	AnsiString FPhysicalPath;
	AnsiString FMethod;
	THttpMethodType FMethodType;
	AnsiString FContentType;
	AnsiString FCachedLiteralName;
	AnsiString FCachedLiteralValue;
	TRequestVariables* FQueryString;
	TRequestVariables* FForm;
	TRequestCookies* FCookies;
	TBrowserType* FBrowserCaps;
	AnsiString __fastcall GetServerVariable(const AnsiString varName);
	AnsiString __fastcall GetHttpHeader(const AnsiString headerName);
	TRequestCookies* __fastcall GetCookies(void);
	void __fastcall RetrieveCookies(void);
	AnsiString __fastcall GetScriptName(void);
	AnsiString __fastcall GetRemoteUser(void);
	TBrowserType* __fastcall GetBrowserCaps(void);
	TRequestVariables* __fastcall GetForm(void);
	AnsiString __fastcall GetLiteral(const AnsiString name);
	
public:
	__fastcall THttpRequest(TAbstractHttpRequestInterface* HttpInterface);
	__fastcall virtual ~THttpRequest(void);
	__property TStream* InputStream = {read=FInputStream, nodefault};
	__property AnsiString ContentType = {read=FContentType, nodefault};
	__property AnsiString Literals[AnsiString Name] = {read=GetLiteral/*, default*/};
	__property TRequestVariables* QueryString = {read=FQueryString, nodefault};
	__property TRequestVariables* Form = {read=GetForm, nodefault};
	__property TRequestCookies* Cookies = {read=GetCookies, nodefault};
	__property AnsiString ServerVariables[AnsiString VarName] = {read=GetServerVariable};
	__property AnsiString HTTPHeaders[AnsiString HeaderName] = {read=GetHttpHeader};
	__property AnsiString LogicalPath = {read=FLogicalPath, nodefault};
	__property AnsiString PhysicalPath = {read=FPhysicalPath, nodefault};
	__property AnsiString Method = {read=FMethod, nodefault};
	__property THttpMethodType MethodType = {read=FMethodType, nodefault};
	__property AnsiString ScriptName = {read=GetScriptName, nodefault};
	__property AnsiString RemoteUser = {read=GetRemoteUser, nodefault};
	AnsiString __fastcall MapPath(const AnsiString LogicalPath);
	__property TBrowserType* BrowserCaps = {read=GetBrowserCaps, nodefault};
};

class __declspec(delphiclass) THttpResponse;
class __declspec(pascalimplementation) THttpResponse : public TObject
{
	typedef TObject inherited;
	
private:
	TAbstractHttpRequestInterface* FHttpInterface;
	THttpRequest* FRequest;
	AnsiString FStatus;
	AnsiString FContentType;
	int FContentLength;
	int FExpires;
	TDateTime FExpiresAbsolute;
	TStrings* FHeaders;
	THttpResponseCookieList* FCookies;
	bool FBuffer;
	TStream* FBufferStream;
	TStream* FOutputStream;
	int FOutputStreamPosition;
	int FBytesSent;
	TCustomTextFileDriver* TextFileDriver;
	bool statusLineWritten;
	bool inWriteHeader;
	bool headerWritten;
	long __fastcall rawOutputWrite(const void *Buffer, long Count);
	void __fastcall rawWriteString(const AnsiString S);
	void __fastcall rawWritelnString(const AnsiString S);
	long __fastcall rawBodyOutputWrite(const void *Buffer, long Count);
	long __fastcall streamOutputRead(void *Buffer, long Count);
	long __fastcall streamOutputWrite(const void *Buffer, long Count);
	long __fastcall streamOutputSeek(long Offset, Word Origin);
	void __fastcall addCookiesToHeaders(void);
	void __fastcall writeHeader(void);
	void __fastcall verifyHeaderNotWritten(void);
	void __fastcall verifyBuffered(void);
	void __fastcall setBuffer(bool value);
	
public:
	TextFile TextOut;
	__fastcall THttpResponse(THttpRequest* Request, TAbstractHttpRequestInterface* RequestInterface);
	__fastcall virtual ~THttpResponse(void);
	__property AnsiString Status = {read=FStatus, write=FStatus, nodefault};
	void __fastcall AddHeader(const AnsiString Name, const AnsiString Value);
	void __fastcall RequestBasicAuthentication(const AnsiString Realm);
	void __fastcall ClearBuffer(void);
	void __fastcall FlushBuffer(void);
	__property THttpResponseCookieList* Cookies = {read=FCookies, nodefault};
	__property TStream* OutputStream = {read=FOutputStream, nodefault};
	__property int Expires = {read=FExpires, write=FExpires, nodefault};
	__property TDateTime ExpiresAbsolute = {read=FExpiresAbsolute, write=FExpiresAbsolute};
	__property AnsiString ContentType = {read=FContentType, write=FContentType, nodefault};
	__property int ContentLength = {read=FContentLength, write=FContentLength, nodefault};
	__property TStrings* Headers = {read=FHeaders, nodefault};
	__property bool Buffer = {read=FBuffer, write=setBuffer, nodefault};
	void __fastcall WriteStatusLine(void);
	void __fastcall WriteHeaders(void);
	int __fastcall SendFile(const AnsiString Filename);
	int __fastcall SendBitmapAsGIF(TBitmap* Bitmap);
	int __fastcall SendBitmapAsJPEG(TBitmap* Bitmap);
	__property int BytesSent = {read=FBytesSent, nodefault};
	void __fastcall Redirect(const AnsiString URL);
	TDateTime __fastcall GetExpirationTime(void);
};

class __declspec(pascalimplementation) THttpTransaction : public TObject
{
	typedef TObject inherited;
	
private:
	TAbstractHttpRequestInterface* FRequestInterface;
	bool FOwnRequestInterface;
	THttpRequest* FRequest;
	THttpResponse* FResponse;
	
public:
	__fastcall THttpTransaction(TAbstractHttpRequestInterface* RequestInterface, bool OwnRequestInterface
		);
	__fastcall virtual ~THttpTransaction(void);
	__property TAbstractHttpRequestInterface* RawHttpRequest = {read=FRequestInterface, nodefault};
	__property THttpRequest* Request = {read=FRequest, nodefault};
	__property THttpResponse* Response = {read=FResponse, nodefault};
};

class __declspec(pascalimplementation) TRequestVariable : public TObject
{
	typedef TObject inherited;
	
private:
	TStrings* FValues;
	AnsiString FName;
	int __fastcall getCount(void);
	Variant __fastcall getSubValue(int index);
	Variant __fastcall getValue(void);
	
public:
	__fastcall TRequestVariable(const AnsiString Name);
	__fastcall virtual ~TRequestVariable(void);
	__property AnsiString Name = {read=FName, nodefault};
	__property int Count = {read=getCount, nodefault};
	__property Variant Values[int Index] = {read=getSubValue/*, default*/};
	bool __fastcall ValueExists(const Variant &Value);
	__property Variant Value = {read=getValue};
};

class __declspec(pascalimplementation) TRequestCookie : public TPersistent
{
	typedef TPersistent inherited;
	
private:
	TStrings* FValues;
	AnsiString FName;
	Variant FValue;
	__fastcall TRequestCookie(const AnsiString CookieName, const AnsiString CookieValue);
	__fastcall virtual ~TRequestCookie(void);
	Variant __fastcall getValue(const Variant &index);
	int __fastcall getCount(void);
	
protected:
	virtual void __fastcall AssignTo(TPersistent* Dest);
	
public:
	__property AnsiString Name = {read=FName, nodefault};
	__property Variant Value = {read=FValue};
	__property int Count = {read=getCount, nodefault};
	__property Variant Values[Variant Index] = {read=getValue/*, default*/};
	bool __fastcall ValueExists(const AnsiString Index);
public:
	/* TObject.Create */ __fastcall TRequestCookie(void) : TPersistent() { }
	
};

class __declspec(delphiclass) EHttpResponse;
class __declspec(pascalimplementation) EHttpResponse : public Exception
{
	typedef Exception inherited;
	
public:
	/* Exception.Create */ __fastcall EHttpResponse(const AnsiString Msg) : Exception(Msg) { }
	/* Exception.CreateFmt */ __fastcall EHttpResponse(const AnsiString Msg, const TVarRec * Args, const 
		int Args_Size) : Exception(Msg, Args, Args_Size) { }
	/* Exception.CreateRes */ __fastcall EHttpResponse(int Ident) : Exception(Ident) { }
	/* Exception.CreateResFmt */ __fastcall EHttpResponse(int Ident, const TVarRec * Args, const int Args_Size
		) : Exception(Ident, Args, Args_Size) { }
	/* Exception.CreateHelp */ __fastcall EHttpResponse(const AnsiString Msg, int AHelpContext) : Exception(
		Msg, AHelpContext) { }
	/* Exception.CreateFmtHelp */ __fastcall EHttpResponse(const AnsiString Msg, const TVarRec * Args, 
		const int Args_Size, int AHelpContext) : Exception(Msg, Args, Args_Size, AHelpContext) { }
	/* Exception.CreateResHelp */ __fastcall EHttpResponse(int Ident, int AHelpContext) : Exception(Ident
		, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ __fastcall EHttpResponse(int Ident, const TVarRec * Args, const int 
		Args_Size, int AHelpContext) : Exception(Ident, Args, Args_Size, AHelpContext) { }
	
public:
	/* TObject.Destroy */ __fastcall virtual ~EHttpResponse(void) { }
	
};

class __declspec(delphiclass) EResponseBuffer;
class __declspec(pascalimplementation) EResponseBuffer : public EHttpResponse
{
	typedef EHttpResponse inherited;
	
public:
	/* Exception.Create */ __fastcall EResponseBuffer(const AnsiString Msg) : EHttpResponse(Msg) { }
	/* Exception.CreateFmt */ __fastcall EResponseBuffer(const AnsiString Msg, const TVarRec * Args, const 
		int Args_Size) : EHttpResponse(Msg, Args, Args_Size) { }
	/* Exception.CreateRes */ __fastcall EResponseBuffer(int Ident) : EHttpResponse(Ident) { }
	/* Exception.CreateResFmt */ __fastcall EResponseBuffer(int Ident, const TVarRec * Args, const int 
		Args_Size) : EHttpResponse(Ident, Args, Args_Size) { }
	/* Exception.CreateHelp */ __fastcall EResponseBuffer(const AnsiString Msg, int AHelpContext) : EHttpResponse(
		Msg, AHelpContext) { }
	/* Exception.CreateFmtHelp */ __fastcall EResponseBuffer(const AnsiString Msg, const TVarRec * Args
		, const int Args_Size, int AHelpContext) : EHttpResponse(Msg, Args, Args_Size, AHelpContext) { }
	/* Exception.CreateResHelp */ __fastcall EResponseBuffer(int Ident, int AHelpContext) : EHttpResponse(
		Ident, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ __fastcall EResponseBuffer(int Ident, const TVarRec * Args, const 
		int Args_Size, int AHelpContext) : EHttpResponse(Ident, Args, Args_Size, AHelpContext) { }
	
public:
	/* TObject.Destroy */ __fastcall virtual ~EResponseBuffer(void) { }
	
};

class __declspec(delphiclass) EResponseHeader;
class __declspec(pascalimplementation) EResponseHeader : public EHttpResponse
{
	typedef EHttpResponse inherited;
	
public:
	/* Exception.Create */ __fastcall EResponseHeader(const AnsiString Msg) : EHttpResponse(Msg) { }
	/* Exception.CreateFmt */ __fastcall EResponseHeader(const AnsiString Msg, const TVarRec * Args, const 
		int Args_Size) : EHttpResponse(Msg, Args, Args_Size) { }
	/* Exception.CreateRes */ __fastcall EResponseHeader(int Ident) : EHttpResponse(Ident) { }
	/* Exception.CreateResFmt */ __fastcall EResponseHeader(int Ident, const TVarRec * Args, const int 
		Args_Size) : EHttpResponse(Ident, Args, Args_Size) { }
	/* Exception.CreateHelp */ __fastcall EResponseHeader(const AnsiString Msg, int AHelpContext) : EHttpResponse(
		Msg, AHelpContext) { }
	/* Exception.CreateFmtHelp */ __fastcall EResponseHeader(const AnsiString Msg, const TVarRec * Args
		, const int Args_Size, int AHelpContext) : EHttpResponse(Msg, Args, Args_Size, AHelpContext) { }
	/* Exception.CreateResHelp */ __fastcall EResponseHeader(int Ident, int AHelpContext) : EHttpResponse(
		Ident, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ __fastcall EResponseHeader(int Ident, const TVarRec * Args, const 
		int Args_Size, int AHelpContext) : EHttpResponse(Ident, Args, Args_Size, AHelpContext) { }
	
public:
	/* TObject.Destroy */ __fastcall virtual ~EResponseHeader(void) { }
	
};

typedef int __fastcall (*TBitmapToJPEGStreamProc)(TBitmap* Bitmap, TStream* Stream);

typedef int __fastcall (*TBitmapToGIFStreamProc)(TBitmap* Bitmap, TStream* Stream);

//-- var, const, procedure ---------------------------------------------------
extern TBitmapToGIFStreamProc BitmapToGIFStreamProc;
extern TBitmapToJPEGStreamProc BitmapToJPEGStreamProc;
#define hsContinue (Byte)(100)
#define hsSwitchingProtocols (Byte)(101)
#define hsOK (Byte)(200)
#define hsCreated (Byte)(201)
#define hsAccepted (Byte)(202)
#define hsNonAuthoritativeInformation (Byte)(203)
#define hsNoContent (Byte)(204)
#define hsResetContent (Byte)(205)
#define hsPartialContent (Byte)(206)
#define hsMultipleChoices (Word)(300)
#define hsMovedPermanently (Word)(301)
#define hsMovedTemporarily (Word)(302)
#define hsSeeOther (Word)(303)
#define hsNotModified (Word)(304)
#define hsUseProxy (Word)(305)
#define hsBadRequest (Word)(400)
#define hsUnauthorized (Word)(401)
#define hsPaymentRequired (Word)(402)
#define hsForbidden (Word)(403)
#define hsNotFound (Word)(404)
#define hsMethodNotAllowed (Word)(405)
#define hsNoneAcceptable (Word)(406)
#define hsProxyAuthenticationRequired (Word)(407)
#define hsRequestTimeout (Word)(408)
#define hsConflict (Word)(409)
#define hsGone (Word)(410)
#define hsLengthRequired (Word)(411)
#define hsUnlessTrue (Word)(412)
#define hsInternalServerError (Word)(500)
#define hsNotImplemented (Word)(501)
#define hsBadGateway (Word)(502)
#define hsServiceUnavailable (Word)(503)
#define hsGatewayTimeout (Word)(504)
extern AnsiString __fastcall StatusCodeToReason(int StatusCode);
extern AnsiString __fastcall FormatStatusString(int StatusCode);
extern bool __fastcall DecodeBasicAuthorization(const AnsiString AuthorizationHeader,  AnsiString &UserName
	,  AnsiString &Password);
//-- end unit ----------------------------------------------------------------
#endif	// AppSSI
