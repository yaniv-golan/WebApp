/////////////////////////////////////////////////////////////////////////////
//
// Written by Yaniv Golan, ygolan@hyperact.com
// http://www.hyperact.com
// Copyright (C) 1996 - 1998 by HyperAct, Inc.
// All Rights Reserved.
//
/////////////////////////////////////////////////////////////////////////////

{ ?? : This units contains the <see class=TAdRotator> component }
unit AdRotate;

interface

uses
  Windows, Messages, SysUtils, Classes, HtmlTxt, SDS;

type

  {:  This is a procedure type for the <see event=TAdRotate.OnAdvertisement> event.
  }
  TAdvertisementEvent = procedure(
    Sender: TObject;
    const AdURL, AdHomePageURL, Text: string;
    var HTML: string) of object;

  {:The <strong>TAdRotator</strong> component
    is a <jump id=WebAppControls text="WebApp Control">
    which automates the rotation of advertisement banners.
    Whenever the component is asked to create a banner, a
    new banner is displayed based on the information in a
    <jump id=RotSched text="Rotator Schedule File">.<p>
    You can record how many users click each advertisement
    using the <see event=TAdRotator.OnAdvertisement> event.
    Another technique is to use the REDIRECT parameter in the
    <jump id=RotSched text="Rotator Schedule File"> -
    see there for more details.
  @component  }
  TAdRotator = class(TWapControl)
  private
    { Private declarations }
    FBorder: integer;
    FWidth: integer;
    FHeight: integer;
    FClickable: boolean;
    FTargetFrame: string;
    FAds: TObjectList;
    FSheduleFilename: string;
    FTotalImpressions: integer;
    FScheduleFilename: string;
    FRedirect: string;
    FOnAdvertisement: TAdvertisementEvent;
    procedure SetScheduleFilename(const Value: string);
    procedure ReadScheduleFile;
  protected
    { Protected declarations }
    procedure HandleAdvertisement(const AdURL, AdHomePageURL, Text: string; var HTML: string); virtual;
    procedure ProduceHTML(Dest: TStrings); override;
  public
    { Public declarations }
    //: A standard constructor
    constructor Create(AOwner: TComponent); override;
    //: A standard destructor
    destructor Destroy; override;
  published
    { Published declarations }
    {: Specifies the thickness of the border that surrounds the displayed
    advertisement. The default for this property is
    1, indicating a 1-pixel wide border. Use 0 for no
    border. <p>
    The <jump id=RotSched text="Rotator Schedule File"> can override
    the value of this property using the BORDER parameter.    }
    property Border: integer read FBorder write FBorder;

    {: Specifies whether the advertisement should be a hyperlink.
       The default value is <strong>True</strong>.
       <p>In addition, a banner won't be clickable if its entry in the
       <jump id=RotSched text="Rotator Schedule File"> does include the
       AdHomePageURL parameter. }
    property Clickable: boolean read FClickable write FClickable;

    {: Specifies the name of the frame in which to display the advertisement}
    property TargetFrame: string read FTargetFrame write FTargetFrame;

    {: Determines the location of the Rotator Schedule File.
        It must be set before one of the <jump id=content_producers
        text="content producing"> methods can be called.<p>
        The Rotator Schedule File format is compatible with the format used
        by the Microsoft Active Server Pages component <strong>MSWC.AdRotator</strong>,
        and is documented by Microsoft in the
        <a href="http://www.microsoft.com/msdn/sdk/platforms/doc/aspdocs/ref/comp/compref_1.htm">Active Server Pages
        documentation</a>. }
    property ScheduleFilename: string read FScheduleFilename write SetScheduleFilename;

    {: This event is fired whenever the
     component is asked to generate a new banner using one of
     the <jump id=content_producers text="WebApp content producing"> methods.<p>
     The <b>AdURL</b>, <b>AdHomePageURL</b> and <b>Text</b> parameters
     correspond to the matching
     parameters in the select advertisement entry in the
     Rotator Schedule File. The HTML parameter contains the
     HTML banner generated by GetAdvertisement.<p>
     Use this event to record how many users click each
     advertisement, or to modify the generated HTML by
     changing the value of the HTML parameter.}
    property OnAdvertisement: TAdvertisementEvent read FOnAdvertisement write FOnAdvertisement;
  end;

procedure Register;

implementation

const
    DefaultWidth = 440;
    DefaultHeight = 60;
    DefaultBorder = 1;

constructor TAdRotator.Create(AOwner: TComponent);
begin
    inherited Create(AOwner);
    FWidth := DefaultWidth;
    FHeight := DefaultHeight;
    FBorder := DefaultBorder;
    FClickable := true;
    FAds := TObjectList.Create(nil);
end;

destructor TAdRotator.Destroy;
begin
    FAds.Free;
    inherited Destroy;
end;

procedure ParseParamLine(const Line: string; var Name, Value: string);
var
    p: integer;
begin
    p := pos(' ', Line);
    if (p = 0) then begin
        Name := Line;
        Value := '';
    end else begin
        Name := trim(copy(Line, 1, p - 1));
        Value := trim(copy(Line, p + 1, maxInt));
    end;
end;

type
TAdInfo = class
public
    AdURL: string;
    AdHomePageURL: string;
    Text: string;
    Impressions: integer;
end;

procedure TAdRotator.ReadScheduleFile;
var
    f: TextFile;
    s: string;
    name, value: string;
    i: integer;
    AdInfo: TAdInfo;
begin
    FAds.Clear;
    AssignFile(f, FScheduleFilename);
    Reset(f);
    try
        s := '';
        // read parameters section, until a line with * is encountered
        while (not EOF(f)) do begin
            Readln(f, s);
            if (s = '*') then
                break;
            parseParamLine(s, name, value);
            if (compareText(name, 'REDIRECT') = 0) then
                FRedirect := Value
            else if (compareText(name, 'WIDTH') = 0) then
                FWidth := StrToInt(Value)
            else if (compareText(name, 'HEIGHT') = 0) then
                FHeight := StrToInt(Value)
            else if (compareText(name, 'BORDER') = 0) then
                FBorder := StrToInt(Value)
        end;
        // read the ads section
        while (not EOF(f)) do begin
            AdInfo := TAdInfo.Create;
            try
                Readln(f, AdInfo.AdURL);
                Readln(f, AdInfo.AdHomePageURL);
                Readln(f, AdInfo.Text);
                Readln(f, AdInfo.Impressions);
                FAds.Add(AdInfo);
            except
                AdInfo.Free;
                raise;
            end;
        end;
        FTotalImpressions := 0;
        for i := 0 to (FAds.Count - 1) do
            inc(FTotalImpressions, TAdInfo(FAds[i]).Impressions);
    finally
        CloseFile(f);
    end;
end;

procedure TAdRotator.ProduceHTML(Dest: TStrings); 
var
    SelectedAdKey: integer;
    i: integer;
    Total: integer;
    AdInfo: TAdInfo;
    IsClickable: boolean;
    S: string;
begin
    SelectedAdKey := Random(FTotalImpressions) + 1;
    Total := 0;
    AdInfo := nil;
    for i := 0 to (FAds.Count - 1) do begin
        AdInfo := TAdInfo(FAds[i]);
        inc(Total, AdInfo.Impressions);
        if (SelectedAdKey <= Total) then
            break;
    end; // for

    if (AdInfo = nil) then
        raise exception.create('The schedule file does not contain ads');

    IsClickable := ((FClickable) and (AdInfo.AdHomePageURL <> '') and (AdInfo.AdHomePageURL <> '-'));
    S := '';
    if (IsClickable) then begin
        S := '<A HREF="';
        if (FRedirect = '') then
            S := S + AdInfo.AdHomePageURL
        else
            S := S + FRedirect + '?url=' + AdInfo.AdHomePageURL + '&image=' + AdInfo.AdURL;
        S := S + '"';
        if (FTargetFrame <> '') then
            S := S + ' TARGET="' + FTargetFrame + '"';
        S := S + '>';
    end;
    S := S + '<IMG SRC="' + AdInfo.AdURL + '" ALT="' + AdInfo.Text + '" ' +
        'WIDTH=' + IntToStr(FWidth) + ' HEIGHT=' + IntToStr(FHeight) + ' BORDER=' + IntToStr(FBorder) +
        '>';
    if (IsClickable) then
        S := S + '</A>';

    HandleAdvertisement(AdInfo.AdURL, AdInfo.AdHomePageURL, AdInfo.Text, S);

    Dest.Add(S);
end;

procedure TAdRotator.SetScheduleFilename(const Value: string);
begin
    if (value <> FSheduleFilename) then begin
        FScheduleFilename := Value;
        ReadScheduleFile;
    end;
end;

procedure TAdRotator.HandleAdvertisement(const AdURL, AdHomePageURL, Text: string; var HTML: string);
begin
    if assigned(FOnAdvertisement) then
        FOnAdvertisement(Self, AdURL, AdHomePageURL, Text, HTML);
end;

procedure Register;
begin
  RegisterComponents('WebApp', [TAdRotator]);
end;

initialization
begin
    FileMode := fmOpenRead or fmShareDenyWrite;
end;

end.
